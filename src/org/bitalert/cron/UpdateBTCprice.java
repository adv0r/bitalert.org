package org.bitalert.cron;

import java.io.BufferedReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.bitalert.global.Global;
import org.bitalert.model.Ticker;
import org.bitalert.parser.TickerParser;

@SuppressWarnings("serial")


public class UpdateBTCprice extends HttpServlet {
	
	public void doGet(HttpServletRequest req, HttpServletResponse resp)
	throws IOException {
		 updateTicker();
	     //MailUtils.sendMail(Global.LastTicker.toString());
	}
	
	private static void storeTicker(Ticker t) {	
		/*Store the Ticker*/
		Global.ofy.put(t);
		assert Global.LastTicker.getId() != null;    // id was autogenerated
	}
	
	public static void update(){
		updateTicker();
	}

	private static void updateTicker() {
		Global.log.info("Updating Ticker");
		String ticker="";
		BufferedReader br = null;
		try
		{	
			URL url = new URL(Global.MTGOX_TICKER_STRING);
            InputStream is = url.openStream(); 
            br = new BufferedReader(new InputStreamReader(is));
		}
		catch (MalformedURLException e)
		{
			Global.log.warning("Bad URL");
		}
		catch (IOException e)
		{
			Global.log.warning("IO Error : "+e.getMessage());
		}	
		
		try
		{
			String s;
			boolean eof = false;
			s = br.readLine();
			while( !eof )
			{
				ticker+=(s + String.valueOf('\n'));
				try
				{
					s = br.readLine();
					if ( s == null )
					{
                        eof = true;
						br.close();
					}
				}
				catch (EOFException eo)
                		{
                        	eof = true;
                		}
				catch (IOException e)
                		{
					    	Global.log.warning("IO Error : "+e.getMessage());
                		}
			}
		}
		catch (IOException e)
                {
					Global.log.warning("IO Error : "+e.getMessage());
                }
	Ticker newTicker = TickerParser.createTicker(ticker);
	/*Check if is grown respect last update*/
	Global.ImproveString = TickerParser.isGrater(newTicker, Global.LastTicker);
	Global.LastTicker = newTicker;
	
	
	storeTicker(Global.LastTicker);

	Global.LastPrice = Global.LastTicker.getLast();
	}

}
